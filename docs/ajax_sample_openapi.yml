openapi: 3.0.3
info:
  title: Ajax Sample
  description: 住所録を返すREST APIを持つ、APIサーバのサンプル
  version: '1.0'
servers:
  - url: http://localhost:3000
    description: 開発用ローカルサーバ
paths:
  /addresses.json:
    get:
      summary: 住所録の一覧を返す
      tags:
        - addresses
      parameters:
        - name: mode
          in: query
          description: 検索条件が複数存在した場合の結合条件、省略した場合はand
          schema:
            type: string
            enum:
              - and
              - or
        - name: columns
          in: query
          description: JSONレスポンスに含めるカラム名をカンマ区切りで列挙、省略した場合はすべてのカラムを返す
          schema:
            type: string
            pattern: (id|name|name_kana|gender|phone|mail|zipcode|address[1-5]|age)(,(id|name|name_kana|gender|phone|mail|zipcode|address[1-5]|age))*
        - name: per
          in: query
          description: 1ページ中に含めるデータ件数、省略すると全件返却します
          schema:
            type: integer
            example: 50
        - name: page
          in: query
          description: ページ番号
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        '200':
          description: リクエストが成功し、結果の一覧を返却します
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    description: 返却する合計件数
                    type: integer
                  page:
                    description: 返却したページ番号
                    type: integer
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/address_info"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    post:
      summary: 住所録を作成する
      tags:
        - addresses
      requestBody:
        $ref: '#/components/requestBodies/PostAddressRequest'
      responses:
        '201':
          description: 住所録の作成に成功した
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_info"
  /addresses/{id}:
    get:
      summary: 指定したIDの住所録情報を取得する
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/AddressIDPathParam"
      responses:
        '200':
          description: 住所録参照のリクエストに成功した
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_info"
    put:
      summary: 指定したIDの住所録情報を更新する
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/AddressIDPathParam"
      requestBody:
        $ref: '#/components/requestBodies/PutAddressRequest'
      responses:
        '200':
          description: 住所録更新のリクエストに成功した
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address_info"
    delete:
      summary: 指定したIDの住所録情報を削除する
      tags:
        - addresses
      parameters:
        - $ref: "#/components/parameters/AddressIDPathParam"
      responses:
        '204':
          description: 住所録削除のリクエストに成功した
components:
  parameters:
    AddressIDPathParam:
      name: id
      in: path
      description: 住所録ID
      required: true
      schema:
        type: integer
        example: 1
  requestBodies:
    PostAddressRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/address_info"
    PutAddressRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/address_info"
  responses:
    UnprocessableEntity:
      description: リクエストに失敗
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: エラーメッセージ
  schemas:
    address_info:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 1
        name:
          type: string
          description: 氏名
          example: 田中
        name_kana:
          type: string
          description: 氏名カナ
          example: 一郎
        gender:
          type: string
          enum:
            - 男
            - 女
          description: 性別
          example: 男
        phone:
          type: string
          description: 電話番号
          example: 03-1111-1111
        mail:
          type: string
        zipcode:
          type: string
          pattern: '[1-9][0-9]{2}-[0-9]{4}'
          description: 郵便番号
          example: 100-0001
        address1:
          type: string
          description: 都道府県
          example: 東京都
        address2:
          type: string
          description: 市区町村
          example: 千代田区
        address3:
          type: string
          description: 番地１
          example: 千代田
        address4:
          type: string
          description: 番地２
          example: 1-1
        address5:
          nullable: true
          type: string
          description: 番地３
        age:
          type: integer
          description: 年齢
          example: 71
tags:
  - name: addresses
    description: 住所録API
